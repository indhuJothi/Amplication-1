/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, MyProject, User } from "@prisma/client";

export class MyProjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MyProjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyProjectFindManyArgs>
  ): Promise<number> {
    return this.prisma.myProject.count(args);
  }

  async findMany<T extends Prisma.MyProjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyProjectFindManyArgs>
  ): Promise<MyProject[]> {
    return this.prisma.myProject.findMany(args);
  }
  async findOne<T extends Prisma.MyProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyProjectFindUniqueArgs>
  ): Promise<MyProject | null> {
    return this.prisma.myProject.findUnique(args);
  }
  async create<T extends Prisma.MyProjectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyProjectCreateArgs>
  ): Promise<MyProject> {
    return this.prisma.myProject.create<T>(args);
  }
  async update<T extends Prisma.MyProjectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyProjectUpdateArgs>
  ): Promise<MyProject> {
    return this.prisma.myProject.update<T>(args);
  }
  async delete<T extends Prisma.MyProjectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyProjectDeleteArgs>
  ): Promise<MyProject> {
    return this.prisma.myProject.delete(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.myProject
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
